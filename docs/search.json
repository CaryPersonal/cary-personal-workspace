[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cary’s Personal Workspace",
    "section": "",
    "text": "Important DDLs\n\n\n\n\n\n\n\n\nSubject\nDue Date\nStatus\n\n\n\n\nMATH0050 Exercise Set A\n23:59, Monday, 20 February 2023\nPending Review\n\n\nSTAT0023 ICA1 Take-home Component\n12:00 Noon, Monday, 20 February 2023\nPending Review\n\n\nSTAT0024 Coursework 1\n16:00, Tuesday, 21 February 2023\nPending Review\n\n\nCambridge MPhil in Management Application\n23:59, Friday, 24 February 2023\nIn Progress"
  },
  {
    "objectID": "index.html#what-is-quarto",
    "href": "index.html#what-is-quarto",
    "title": "Cary’s Personal Workspace",
    "section": "What is Quarto?",
    "text": "What is Quarto?\nQuarto helps you have your ideas and your code in one place, and present it in a beautiful way.\nQuarto unifies and extends the RMarkdown ecosystem - it unifies by combining the functionality of R Markdown, bookdown, distill, xaringian, etc into a single consistent system. And it extends in several ways: all features are possible beyond R too, including Python and Javascript. It also has more “guardrails”: accessibility and inclusion are centered in the design. Quarto is for people who love RMarkdown, and it’s for people who have never used RMarkdown.\nThe ability for Quarto to streamline collaboration has been so cool and important for our NASA Openscapes project. Quarto has been a common place for us to collaborate - across R and Python languages and coding expertise."
  },
  {
    "objectID": "index.html#what-is-this-tutorial",
    "href": "index.html#what-is-this-tutorial",
    "title": "Cary’s Personal Workspace",
    "section": "What is this tutorial?",
    "text": "What is this tutorial?\nThis is a 1-hour tutorial that can be used to teach or as self-paced learning.\nWe introduce Quarto by exploring this tutorial website, and practicing the basic Quarto workflow using different tools (GitHub browser, RStudio, and Jupyter) for editing your website.\nWe’ll start off from the browser so you don’t need to install any additional software, however this approach is very limited and you will soon outgrow its capabilities. If you don’t already have a workflow to edit files and sync to GitHub from your computer, I recommend RStudio. You don’t need to know R to use RStudio, and it has powerful editor features that make for happy workflows.\nQuarto.org is the go-to place for full documentation and more tutorials!"
  },
  {
    "objectID": "index.html#example-quarto-sites",
    "href": "index.html#example-quarto-sites",
    "title": "Cary’s Personal Workspace",
    "section": "Example Quarto sites",
    "text": "Example Quarto sites\nA few Quarto websites from Openscapes - so far we have been using Quarto for documentation using Quarto and Markdown files and Jupyter Notebooks.\n\nChampions Lessons Series\nOpenscapes Approach Guide\n\n2021 NASA Cloud Hackathon\nFaylab Lab Manual\nA Quarto tip a day, by Mine Çetinkaya-Rundel"
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Cary’s Personal Workspace",
    "section": "About",
    "text": "About\nOpenscapes is about better science for future us. We help researchers reimagine data analysis, develop modern skills that are of immediate value to them, and cultivate collaborative and inclusive research teams as part of the broader global open movement.\nWe’re developing this tutorial to help folks with different levels of technical skills use Quarto for documentation and tutorial building. This tutorial was originally created for several different audiences: NASA-Openscapes researcher support engineers using Python, communications directors at organizations promoting open science who do not identify as coders, and fisheries scientists curious about transitioning from RMarkdown. We’re hoping it’s useful to folks with backgrounds as wide as these; if you find it useful or have suggestions for improvement, please let us know by clicking “Edit this page” or “Report an issue” at the upper right side of any page."
  },
  {
    "objectID": "explore.html",
    "href": "explore.html",
    "title": "Tools and Tips",
    "section": "",
    "text": "If iCloud gets stuck during the upload process (never finish uploading), open the terminal and try the following:\nkillall bird\nkillall cloudd"
  },
  {
    "objectID": "Tools-and-Tips.html",
    "href": "Tools-and-Tips.html",
    "title": "Tools and Tips",
    "section": "",
    "text": "TextsGraphicsVideosVoices\n\n\nChatGPT: A chatbot developed by OpenAI.\nThe new Bing: The new AI-powered Bing search engine.\n\n\nUnsplash: Beautiful free images & pictures.\nICONS8: Collections of good icons."
  },
  {
    "objectID": "quarto-workflows/index.html",
    "href": "quarto-workflows/index.html",
    "title": "UCL Schoolwork",
    "section": "",
    "text": "This is a test page."
  },
  {
    "objectID": "quarto-workflows/index.html#authoring",
    "href": "quarto-workflows/index.html#authoring",
    "title": "UCL Schoolwork",
    "section": "Authoring",
    "text": "Authoring\nAs an author, you have a lot of options of how your text will be formatted, arranged, and interlinked. You will be writing in Markdown, which is a lightweight text formatting language. The Quarto documentation about authoring introduces markdown-basics that will get you started. Also see Mine Çetinkaya-Rundel’s A Quarto tip a day.\nEach page of our site has a similar first few lines - this YAML, like we saw in our _quarto.yml and it is indicated by two sets of 3 dashes --- :\n---\ntitle: My title\n---\nYou’re able to add more features to individual pages by including it in the YAML, which for the most part here only includes a title. See Quarto excecution options for more information of what you can include in the YAML."
  },
  {
    "objectID": "quarto-workflows/index.html#update-_quarto.yml",
    "href": "quarto-workflows/index.html#update-_quarto.yml",
    "title": "UCL Schoolwork",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml\nLet’s have a closer look at the _quarto.yml file.\nThis type of file (.yml or .yaml) is written in YAML (“Yet Another Markup Language”). You’ll be able to shift the arrangement of webpages by reordering/adding/deleting them in the _quarto.yml file following the patterns you see in this example.\n\n\n\n_quarto.yml and website side-by-side\n\n\nNotice that there are multiple ways in the _quarto.yml for you to include a file in your website. For example, in the above image, the “First Observations” we see in the left sidebar of the published website (right image) is represented in _quarto.yml (left image) over two lines, with line 36 indicating the file reference and line 37 indicating the text to show up in the left sidebar. However, “From RStudio” is only represented in one line of _quarto.yml, on line 43. This represents two strategies for including a file in your website. By default, the title of a specified file will show up in the website’s sidebar, which is what is happening with the “From RStudio” example. If you would like more control over what is written in the sidebar vs the title of your files, then the approach we took with “First Observations” is what you’ll want to do: you’ll see that only “First Observations” shows up in the sidebar as we specified in _quarto.yml, but the page’s title says “First Observations & Setup” (which in our preference was too long for the sidebar).\n\n\n\n\n\n\nNote\n\n\n\nAs you modify _quarto.yml, the most important thing to know is that spacing matters. Pay attention to whether text is indented by one, two, four, or other spaces, and make sure you follow it; if your site is not looking as expected it is likely a silent error in your YAML. Some text editors like RStudio provide debugging support for YAML and are highly recommended to save you time and heartache."
  },
  {
    "objectID": "quarto-workflows/index.html#install-quarto",
    "href": "quarto-workflows/index.html#install-quarto",
    "title": "UCL Schoolwork",
    "section": "Install Quarto",
    "text": "Install Quarto\nhttps://quarto.org/docs/get-started/ describes how to install Quarto, which will depend on your operating system. We’ll walk through installation for each tool in the next chapters."
  },
  {
    "objectID": "UCL-Schoolwork/index.html",
    "href": "UCL-Schoolwork/index.html",
    "title": "UCL Schoolwork",
    "section": "",
    "text": "UCL Portico"
  },
  {
    "objectID": "UCL-Schoolwork/STAT0023.html",
    "href": "UCL-Schoolwork/STAT0023.html",
    "title": "STAT0023",
    "section": "",
    "text": "Required Packages\n\nlibrary(Hmisc)\nlibrary(RColorBrewer)\nlibrary(ggplot2)\nlibrary(maps)\nlibrary(robustbase)\n\n\n\n\n\n\n\n\n\n\nNA (Not Available): missing values; NaN (Not a Number): illegal operations\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies.data <- read.table(\"galapagos.dat\", header = TRUE)\n\nWhat is the name of the (smallest) / (second largest) Galapagos island in the dataset?\n\n## the smallest\nrownames(species.data)[which.min(species.data$Area)]\n## the second largest\nrownames(species.data)[order(species.data$Area, decreasing = TRUE)[2]]\n\nHow many plant species are there in total on the second largest Galapagos island in the dataset?\n\nspecies.data$Species[order(species.data$Area, decreasing = TRUE)[2]]\n\nWhat is the name of the island with a value of 25 for the Elevation variable?\n\nrownames(species.data)[species.data$Elevation == 25]\n\nHow many islands have fewer than 25 species in total?\n\nsum(species.data$Species < 25)\n\nWhat is the estimated slope in a linear regression of Area upon Scruz?\n\nModel <- lm(Area ~ Scruz, data = species.data)\nsummary(Model)\nprint(Model$coefficients, digits = 8)\n\n\n\n\n\niris <- iris\n\nWhat is the mean of the petal widths for all of the flowers in the dataset?\n\nmean(iris$Petal.Width)\n\nWhat is the mean of the petal widths for all of the “setosa” flowers in the dataset?\n\nmean(iris$Petal.Width[iris$Species == \"setosa\"])\n## or\ntapply(iris$Petal.Width, INDEX = iris$Species, FUN = mean)\n\nConsidering the petal lengths of the flowers, which of the three species has the largest standard deviation?\n\ntapply(iris$Petal.Length, INDEX = iris$Species, FUN = sd)\n\nWhat is the 40th percentile of the petal lengths for all of the flowers in the dataset?\n\nprint(quantile(iris$Petal.Length, probs = 0.4), digits = 8)\n\nConsidering the petal lengths of the flowers, which of the three species has the largest 90th percentile?\n\ntapply(iris$Petal.Length, INDEX = iris$Species, FUN = quantile, probs = 0.9)\n\nCarry out a two-tailed t test, assuming equal variances, for a difference between the population mean petal widths for “versicolor” and “virginica” flowers.\n\nresult <- t.test(iris$Petal.Width[iris$Species == \"versicolor\"],\n                 iris$Petal.Width[iris$Species == \"virginica\"],\n                 var.equal = TRUE)\nprint(result, digits = 8)\n\nCarry out an F test of the null hypothesis that the population variance of sepal lengths is the same for flowers of “setosa” and “virginica” species.\n\nresult <- var.test(iris$Sepal.Length[iris$Species == \"setosa\"],\n                   iris$Sepal.Length[iris$Species == \"virginica\"])\nprint(result, digits = 8)\n\nTo three decimal places, what is the lower limit of a 90% confidence interval for the difference between the population mean petal widths for “versicolor” and “virginica” flowers?\n\nresult <- t.test(iris$Petal.Width[iris$Species == \"versicolor\"],\n                 iris$Petal.Width[iris$Species == \"virginica\"],\n                 var.equal = TRUE,\n                 conf.level = 0.90)\nprint(result, digits = 8)\n\n\n\n\n\n\nx <- seq(-2, 2, 0.05)\nx2 <- x^2\nx3 <- x^3\nplot(x, x2)\nlines(x, x3, lwd = 2, col = \"red\")\n\n\n\n\nChickWeight <- ChickWeight\n\n\n\n\n\nCO2 <- CO2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\niris <- iris\n\n\n\n\nModel <- lm(Petal.Length ~ Species - 1, data = iris)\nsummary(Model)\n\nThe coefficient estimates in the above model (no intercept) are just the sample means.\n\n\n\n\nModel <- lm(Petal.Length ~ Species, data = iris)\nsummary(Model)\n\nThe intercept in the above model (intercept included) is the Setosa sample mean. The coefficient estimates are the differences between the respective means and the Setosa mean.\n\n\n\n\nModel <- lm(Petal.Length ~ Species, data = iris, contrasts = list(Species = \"contr.sum\"))\nsummary(Model)\n\nSpecies 1: Setosa\nSpecies 2: Versicolor\nSpecies 3: Virginica\nThe intercept in the above model (“sum to zero” constraint) is the overall mean petal length for all the iris flowers. The coefficients represent the differences between the respective means and the overall mean.\n\n\n\n\nModel <- lm(Petal.Length ~ Species + Sepal.Length, data = iris)\nsummary(Model)\n\nThe intercept in the above model is the expected petal length for Setosa when the sepal length is zero.\n\n\n\n\nModel <- lm(Petal.Length ~ Species + Sepal.Length + Species:Sepal.Length, data = iris)\nsummary(Model)\n\nThe main effect coefficients for Versicolor and Virginica represent differences relative to Setosa. Two additional coefficients for the interactions represent differences in the slopes of the Petal.Length:Sepal.Length relationship for these two species, relative to the slope for Setosa flowers.\nNote: Interactions have nothing to do with correlations between covariates: rather, they relate to the way in which the relationship between one covariate and the response varies with another covariate.\n\n\n\n\n\nload(\"UStemps.rda\")\nustemp$longitude <- -ustemp$longitude\n\n\n\n\nModel1 <- lm(min.temp ~ latitude + longitude, data = ustemp)\nsummary(Model1)\n\n\n\n\n\nModel2 <- lm(min.temp ~ latitude + longitude + I(latitude^2) + I(longitude^2) + latitude:longitude, data = ustemp)\nsummary(Model2)\n\n\n\n\npar(mfrow = c(2,2),\n    mar = c(3,3,2,2),\n    mgp = c(2,0.75,0))\nplot(Model2, which = 1:4)\n\nCook’s Distance plot shows three observations that may be influential, they are:\n\nustemp[c(5, 13, 52), ]\n## 5: Los Angeles, CA\n## 13: Miami, FL\n## 52: Seattle, WA\n\n\n\n\n\n\nModel2Rob <- lmrob(min.temp ~ latitude + longitude + I(latitude^2) + I(longitude^2) + latitude:longitude, data = ustemp)\nsummary(Model2Rob)\n\nNote: the purpose of robust estimation is to try and include all of the observations, but to limit the extent to which any individual observation can influence the fit.\n\n\n\n\n\n\n\nThe main things that can result in incorrect standard errors are non-constant variance and dependence between residuals\n\nSystematic structure in mean residuals\n“Residuals vs Fitted Values” plot, or “Residuals vs Covariates” plot.\nSuch structure indicates that the modelled representation of the regression function is inadequate. Whether this matters is context-specific: you may decide, for example, that the residuals are all so small that your model is already predicting well enough.\nNon-constant variance\n“Residuals vs Fitted Values” plot may exhibit a “funnel” shape (i.e. the residual variance seems higher at one end than the other).\n“Scale-Location” plot: the absolute residuals tend to be larger at one end than the other.\nIn this case, the least-squares estimates are not fully efficient (i.e. you’re not making the best use of your data), and the reported standard errors will be incorrect — as will the results of any hypothesis tests and confidence interval calculations.\nNon-normal residuals\n“Normal Q-Q plot”: the residuals don’t fall roughly on a straight line.\nThis is not critical in large samples, the exception is where you want to calculate prediction intervals for future observations: these will only be accurate if the future observations do indeed have an approximate normal distribution.\nLack of independence\nCommon situations in which it might be a problem are when data are collected at successive time points, or at a collection of spatial locations. Although none of the ‘standard’ plots is designed to check for this, lack of independence can lead to apparent structure in some of the residual plots. For example, if observations are collected sequentially in time and successive residuals are highly correlated, this can give the appearance of curvature in the “Residuals vs Fitted Values” plot: the curvature is not due to a nonlinear relationship between response and covariates, but simply due to the fact that neighbouring residuals are similar to each other because they are correlated.\n\n\n\n\nRule-of-thumb: observation influential if Cook’s distance exceeds \\(\\frac{8}{n-2k}\\), where k is the number of coefficients estimated.\n\n\n\n\nTransform the response variable and / or covariate (but only if the resulting model makes scientific sense). Sometimes, a relationship can be made more linear by taking logs or square roots of one or more quantities; transforming the response variable can also help to make the residual variance more constant, and to make the assumption of normality more reasonable. Don’t take logs (or square roots) of quantities that could be negative, though!\nAdd additional terms to the model. For the temperature data for example, you might consider extending the quadratic model to include third-degree terms in latitude and longitude; or additional covariates such as altitude if these were available.\nIf the diagnostics suggest that the residual variance is related to the fitted values (e.g. the ‘residuals versus fitted values’ plot has a funnel shape) and there is good reason to suspect that the responses follow non-normal distributions (e.g. because they are counts, so that Poisson distributions might be more appropriate) then a more general class of models may be appropriate — such as generalized linear models (GLMs).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nReturn TRUE if there is at least one strictly negative value in a vector x, and FALSE otherwise.\n\nany(x<0)\n\nExtract the elements of a vector x that are both (i) strictly positive (ii) divisible by 10.\n\nx[x>0&x%%10==0]\n\nExtract the rows of a matrix or data frame y for which the corresponding elements of a vector x are non-negative, where x is a vector with length equal to the number of rows of y.\n\ny[x>=0,]\n\nExtract the elements of a vector y for which the corresponding elements of x are strictly negative.\n\ny[x<0]\n\n\n\n\nCreate a function to approximate an integral using the trapezium rule with equally spaced x values.\n\ntrapezium <- function(v, a, b) {\n  n <- length(v) - 1\n  h <- (b - a) / n\n  intv <- (h / 2) * (sum(v) + sum(v[2 : n]))\n  intv\n}\n\nUse the above function to evaluate the integral \\(\\int_{1}^{5}arctan(x)dx\\) with 39 evaluation points (i.e. so that the input vector v has 39 elements).\n\ntrapezium(atan(seq(1, 5,length.out = 39)), 1, 5)\n\n\n\n\n\n\n\n\n\n\nCreate a QuarticMin() function to minimise function \\(h(x)=4x^2+5x+3\\), with starting value \\(x_0=-3\\).\n\nQuarticMin <- function(x0, tol = 1e-6, MaxIter = 100, Verbose = TRUE) {\n  x <- x0\n  Iter <- 0\n  dh.dx <- (8 * x) + 5 # First derivative\n  RelChange <- Inf\n  while (abs(dh.dx) > tol & abs(RelChange) > tol & Iter < MaxIter) {\n    if (Verbose) {\n      cat(paste(\"Iteration\",Iter,\":   Estimate =\",signif(x,5),\n                \"    Gradient = \",signif(dh.dx,5),\"\\n\"))\n    }\n    x.old <- x\n    d2h.dx2 <- 8 # Second derivative\n    x <- x - (dh.dx / d2h.dx2)\n    dh.dx <- (8 * x) + 5 # First derivative\n    RelChange <- (x-x.old) / x.old\n    Iter <- Iter + 1\n  }\n  if (Verbose) cat(\"---\\n\")\n  hmin <- (4 * x^2) + (5 * x) + 3 # Original\n  list(x=x, hx=hmin, gradient=dh.dx, N.iter=Iter)\n}\n\nQuarticMin(-3)\n\nNote: In Iteration n, Estimate = \\(x_{n}\\).\n\n\n\nCreate a tploglik() function to returns the negative log likelihood of a truncated Poisson distribution, up to a constant.\n\ntploglik <- function(theta, y) {\n  n <- length(y)\n  ybar <- mean(y)\n  n * (theta - (ybar * log(theta)) + log(1 - exp(-theta)))\n}\n\nTruncated Poisson Distribution Data\n\nTPdata <- rep(1:14, c(97, 164, 242, 182, 154, 83, 44, 19, 9, 7, 2, 0, 0, 1))\n\nUse nlm() and tploglik() functions to find the maximum likelihood estimate of \\(\\theta\\) together with its estimated standard error. Use the sample mean of the original 1004 values as the starting point for nlm().\n\nTP.fitted <- nlm(tploglik, mean(TPdata), y = TPdata, hessian = TRUE)\n\n\n## The MLE of theta\nTP.fitted$estimate\n## Estimated Standard Error of the MLE\n1 / sqrt(TP.fitted$hessian)\n\n\n\n\nData\n\nNLSdata <- read.table(file = \"nls2.dat\", header = TRUE)\n\nFit a linear model regressing log(Y) on x\n\nModel_Log <- lm(log(Y) ~ x, data = NLSdata)\nsummary(Model_Log)\n\nsumsqerr() function to compute sum of squared errors\n\nsumsqerr <- function(theta, x, Y) {\n  beta0 <- theta[1]\n  beta1 <- theta[2]\n  mu <- beta0 * exp(beta1 * x)\n  sum((Y - mu)^2)\n}\n\nFor your nonlinear model, what is the sum of squared errors for the parameter values \\(\\beta_0=1.4\\), \\(\\beta_1=-0.1\\)?\n\nsumsqerr(c(1.4, -0.1), x = NLSdata$x, Y = NLSdata$Y)\n\nTry fitting your nonlinear model using nlm(), with starting values \\(\\beta_0=-0.8\\) and \\(\\beta_1=-0.6\\). Compare the minimised sum of squares with the value that you obtained in the workshop starting from \\(\\beta_0=1.3\\) and \\(\\beta_1=-0.3\\). Has nlm() located (approximately) the same minimum this time?\n\nNLS.fit1 <- nlm(sumsqerr, c(-0.8, -0.6), x = NLSdata$x, Y = NLSdata$Y, hessian = TRUE)\nNLS.fit2 <- nlm(sumsqerr, c(1.3, -0.3), x = NLSdata$x, Y = NLSdata$Y, hessian = TRUE)\n\nTry fitting the model using nlm(), with starting values \\(\\beta_0=0.2\\) and \\(\\beta_1=0.4\\). At the estimated minimum, what is the (2, 2) element of the Hessian matrix of the sum of squares?\n\nNLS.fit3 <- nlm(sumsqerr, c(0.2, 0.4), x = NLSdata$x, Y = NLSdata$Y, hessian = TRUE)\nNLS.fit3$hessian[2, 2]"
  },
  {
    "objectID": "UCL-Schoolwork/ECON0047.html",
    "href": "UCL-Schoolwork/ECON0047.html",
    "title": "From Jupyter",
    "section": "",
    "text": "You can interact with Quarto through JupyterLab or JupyterHub. Your Jupyter setup will involve .ipynb notebooks and the command line. Quarto’s JupyterLab tutorials has great instructions on getting started with JupyterLab, including computations and authoring.\nHere we will demonstrate how to work with this Quarto tutorial site in JupyterHub and add a Jupyter Notebook (.ipynb file). This example uses the NASA-Openscapes JupyterHub that already has all python environments as well as Quarto installed."
  },
  {
    "objectID": "UCL-Schoolwork/ECON0047.html#setup",
    "href": "UCL-Schoolwork/ECON0047.html#setup",
    "title": "From Jupyter",
    "section": "Setup",
    "text": "Setup\n\nJupyterHub\nOur JupyterHub is already setup with python environments as well as Quarto (through nasa-openscapes/corn), so there is no further installation required.\n\n\nClone your repo\nYou’ll start by cloning your repository into JupyterHub. Do this by opening a terminal (File > New > Terminal). In the Terminal, git clone your repository and cd into it:\ngit clone https://github.com/openscapes/quarto-website-tutorial\ncd quarto-website-tutorial\n\n\nInstall Quarto\nNot needed - Quarto is already installed on the NASA-Openscapes JupyterHub! But to install elsewhere you would do so from https://quarto.org/docs/get-started/.\nQuarto is a Command Line Interface (CLI), like git. Once download is complete, follow the installation prompts on your computer like you do for other software. You won’t see an application to click on when it is installed.\nNote for Mac users: If you do not have administrative privileges, please select “Install for me only” during the Destination Selection installation step (you will first click on “Change Install Location” at the Installation Type step).\nYou can check to confirm that Quarto is installed properly from the command line:\nquarto check install\n\n\n\n\n\n\nAdditional checks\n\n\n\n\n\nYou can also run:\n\nquarto check knitr to locate R, verify we have the rmarkdown package, and do a basic render\nquarto check jupyter to locate Python, verify we have Jupyter, and do a basic render\nquarto check to run all of these checks together\n\n\n\n\n\n\n\n\n\n\nHistorical aside: Install Quarto in a docker container\n\n\n\n\n\nIn Summer 2021 some NASA Mentors trying to install quarto locally was not an option, but they were able to install it inside a container using the following Dockerfile:\n#| fold: true\n#| summary: \"Show the Dockerfile\"\n\n##############################\n# This Dockerfile installs quarto and then runs quarto serve against the\n# internal /home/quarto/to_serve.\n#\n# BUILD\n# -----\n# To build this container, run\n#\n#     docker build -t quarto_serve .\n#\n# Add the --no-cache option to force docker to build fresh and get the most\n# recent version of quarto.\n#\n#\n# RUN\n# ---\n# 1. Find the directory you want quarto to serve. Let's call this /PATH/TO/earthdata-cloud-cookbook.\n# 2. Run docker:\n#\n#     docker run --rm -it -p 4848:4848 -v /PATH/TO/earthdata-cloud-cookbook:/home/quarto/to_serve quarto_serve\n#\n# 3. Open your browser and go to http://127.0.0.1:4848/\n#\n##############################\n\nFROM ubuntu:hirsute\n\n######\n# Install some command line tools we'll need\n######\nRUN apt-get update\nRUN apt-get -y install wget\nRUN apt-get -y install gdebi-core\nRUN apt-get -y install git\n\n\n######\n# Install quarto (https://quarto.org/)\n######\n\n# This is a quick and dirty way of getting the newest version number from\n# https://github.com/quarto-dev/quarto-cli/releases/latest. What's happening is\n# we're pulling the version number out of the redirect URL. This will end up\n# with QVER set to something like 0.2.11.\nRUN QVER=`wget --max-redirect 0 https://github.com/quarto-dev/quarto-cli/releases/latest 2>&1 | grep \"Location\" | sed 's/L.*tag\\/v//' | sed 's/ .*//'` \\\n    && wget -O quarto.deb \"https://github.com/quarto-dev/quarto-cli/releases/download/v$QVER/quarto-$QVER-amd64.deb\"\nRUN gdebi -n quarto.deb\n\n# Run this to make sure quarto installed correctly\nRUN quarto check install\n\n\n######\n# Create a non-root user called quarto\n######\nRUN useradd -ms /bin/bash quarto\nUSER quarto\nRUN mkdir /home/quarto/to_serve\nWORKDIR /home/quarto/to_serve\n\n\n######\n# Start quarto serve\n######\n\nCMD quarto serve --no-browse --host 0.0.0.0 --port 4848"
  },
  {
    "objectID": "UCL-Schoolwork/ECON0047.html#quarto-preview",
    "href": "UCL-Schoolwork/ECON0047.html#quarto-preview",
    "title": "From Jupyter",
    "section": "Quarto preview",
    "text": "Quarto preview\nLet’s start off by previewing our quarto site locally. In Terminal, type quarto preview, which will provide a URL with a preview of our site!\nquarto preview\n# Preparing to preview\n# Watching files for changes\n# Browse at https://openscapes.2i2c.cloud/user/jules32/proxy/4593/\nCopy this URL into another browser window; and arrange them so you can see them both. I make a bit more space in Jupyter by collapsing the left file menu by clicking on the file icon at the top of the left sidebar.\n\n\n\n\n\n\nMake a small change and preview it\nNow we’ll be able to see live changes in the preview as we edit in our .md files. Let’s try it: Change the date in index.md by opening it from the file directory. Change to today’s date, and save. Your preview window will refresh automatically! If it does not, you can also refresh the page manually. The refreshed previewed site will now display your changes!"
  },
  {
    "objectID": "UCL-Schoolwork/ECON0047.html#create-a-new-.ipynb-page",
    "href": "UCL-Schoolwork/ECON0047.html#create-a-new-.ipynb-page",
    "title": "From Jupyter",
    "section": "Create a new .ipynb page",
    "text": "Create a new .ipynb page\nLet’s add a new page to our site. Instead of an .md file like the others, let’s add a .ipynb file.\nFile > New > Notebook. Accept the default kernel by clicking Select.\n\nFirst chunk: raw yaml\nBy default, this Notebook will give us a first chunk that is code. Let’s change it to raw so that we can write our yaml at the top.\n\n\n\n\n\nIn our Raw code chunk, let’s write the title of this document. We need three dashes --- on separate lines preceding and following the title:, which you can name as you’d like.\n---\ntitle: Python Example\n---\n\n\nSecond chunk: Markdown\nLet’s add a new chunk that is Markdown so we can write some description of what this page will be.\nClick the + symbol at the top of the document, and this will add a new chunk, which by default again is a Code chunk. Change it to a Markdown Chunk following the steps we did above when switching to Raw.\nHere, write a little bit of text in Markdown. Since your title is effectively a level-1 header, avoid using level-1 headers in the rest of your document. Here is some example text I wrote:\n## Introduction\n\nThis example has some Python code that will be a part of our Quarto site.\n\n\nThird chunk: Code\nNow let’s create a new chunk with the default Code setting.\nPaste the following code (or write some of your own to test):\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\nimport numpy as np\nimport matplotlib.pyplot as plt\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\nNow, go ahead and execute this code chunk like you normally would, by clicking the cursor in a code block and clicking the sideways “play” triangle to run the selected cells (and advance to the next cell). This code produces a plot.\nNote that the code runs as it normally would; the code options in the comments are just comments.\n\n\nSave your file\nSave your document - I’ll call mine python-example.ipynb in the main repository."
  },
  {
    "objectID": "UCL-Schoolwork/ECON0047.html#update-_quarto.yml",
    "href": "UCL-Schoolwork/ECON0047.html#update-_quarto.yml",
    "title": "From Jupyter",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml\nNow we’ll add python-example.ipynb to our _quarto.yml file; this is where we register of all files to include in our site. Let’s add it after the section called “Basic Workflows”.\nOpen _quarto.yml by clicking on it from the file directory.\nScroll down to review the current contents in the sidebar: section. It’s there we see all the file arrangement that we see in the previewed site.\nAdd - python-example.ipynb to line 46, making sure that your indentation aligns with the other pages.\n\n\n\n\n\nYou’ll see that our new page shows up in our Preview, and the code is executed since we did that in the Jupyter Notebook itself. By default, Quarto will not execute code chunks since your computations will likely become more complex and you will want to control when they are executed (or “run”).\nSince Quarto is still previewing our website and the python-example.ipynb, the plot also displays in the notebook after the code is run and the file is saved, as shown below.\n\n\n\n\n\nSo, your normal workflow for creating and running code blocks in your Jupyter Notebook is the same one you’ll use as Quarto displays the preview."
  },
  {
    "objectID": "UCL-Schoolwork/ECON0047.html#quarto-render",
    "href": "UCL-Schoolwork/ECON0047.html#quarto-render",
    "title": "From Jupyter",
    "section": "Quarto render",
    "text": "Quarto render\nSo far we have used Quarto preview to view our website as we develop it. Quarto render will build the html elements of the website that we can see when we preview. Rendering will format the markdown text and code nicely as a website (or however is indicated in the _quarto.yml).\nBy default, Quarto render does not execute code in a Jupyter notebook. It will never run .ipynb files unless you tell it to.\n\nRender whole notebook\nIf you would like it to specifically execute code in a Jupyter notebook, you can do so in Terminal.\nOur Terminal is still busy previewing our website, so let’s open a new Terminal.\nFile > New > Terminal. Then type:\ncd quarto-website-tutorial\nquarto render python-example.ipynb --execute"
  },
  {
    "objectID": "UCL-Schoolwork/ECON0047.html#authoring-tips",
    "href": "UCL-Schoolwork/ECON0047.html#authoring-tips",
    "title": "From Jupyter",
    "section": "Authoring tips",
    "text": "Authoring tips\nQuarto.org has details about authoring, including specific instructions about authoring in Jupyter: quarto.org/docs/reference/cells/cells-jupyter."
  },
  {
    "objectID": "UCL-Schoolwork/ECON0047.html#commit-and-push",
    "href": "UCL-Schoolwork/ECON0047.html#commit-and-push",
    "title": "From Jupyter",
    "section": "Commit and push!",
    "text": "Commit and push!\nCommitting and pushing will make the changes you see locally live on your website (using the GitHub Action we set up earlier)."
  },
  {
    "objectID": "UCL-Schoolwork/ECON0047.html#troubleshooting",
    "href": "UCL-Schoolwork/ECON0047.html#troubleshooting",
    "title": "From Jupyter",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nMy changes don’t show up in preview\nMake sure you’ve saved your file! There might be a slight delay depending on your JupyterHub/Lab setup.\n\n\nQuarto render hangs / does not complete\nCheck the specific notebook, are there any `—` throughout to denote line breaks rather than yaml? They might be causing the issue; consider deleting those.\nAlso check how long the first raw cell is. Are there level-1 headers (#)? Try removing them."
  },
  {
    "objectID": "UCL-Schoolwork/STAT0024.html",
    "href": "UCL-Schoolwork/STAT0024.html",
    "title": "From RStudio",
    "section": "",
    "text": "The RStudio software (called an IDE, integrated development environment) is an excellent way to edit files and interface with GitHub. Plus, as it is made by the same folks who make Quarto, it has many integrated features for streamlining your workflow with Quarto, including how it previews your edits and provides debugging support for yaml! Quarto's RStudio tutorials has great instructions on getting started with RStudio, including computations and authoring.\nHere is what you’ll need to do to set up and use RStudio with Quarto."
  },
  {
    "objectID": "UCL-Schoolwork/STAT0024.html#setup",
    "href": "UCL-Schoolwork/STAT0024.html#setup",
    "title": "From RStudio",
    "section": "Setup",
    "text": "Setup\n\nRStudio and GitHub\nFor a workflow with RStudio and GitHub on your local computer, you will need four things:\n\nR\nRStudio\nGit\nGitHub\n\nFollow the UCSB MEDS Installation Guide for detailed instructions on how to create accounts, download, install, and configure on Mac and Windows. This takes about 20 minutes. (For an even more detailed walk-through, see Allison Horst’s ESM 206 Google Doc).\n\n\nClone your repo\nYou’ll start by cloning your repository into RStudio.\nFile > New Project > Version Control > Git > paste your repository name.\nR for Excel Users: Clone your repository using RStudio has detailed instructions and screenshots of these steps.\n\n\nInstall Quarto\nNext, you’ll install Quarto: https://quarto.org/docs/get-started/. After downloading, follow the installation wizard on your computer. When it is complete, you won’t see an application or any new software, but it is now available to RStudio (as well as all other applications on your computer, including the command line).\n\n\nRStudio orientation\nNow let’s take a moment to get oriented. This is an RStudio project, which is indicated in the top-right. The bottom right pane shows all the files in your project; everything we’ve cloned from GitHub. We can open any RStudio project by opening its .Rproj file, or from RStudio File > Open Project ….\n\n\n\nRStudio IDE highlighting the project name and files pane\n\n\n\n\nVisual Editor\nThe RStudio Visual Editor is quite new and has features that improve your writing experience. Working in the Visual Editor feels a bit like working in a Google Doc.\nHere’s an example showing the same file in the original Source Editor with content in markdown format and in the Visual Editor with content that looks more like it will appear in a live site. You can switch freely between these modes.\n\n\n\n\n\n\nRStudio IDE highlighting the Source Editor\n\n\n\n\n\n\n\nRStudio IDE highlighting the Visual Editor\n\n\n\n\n\nAlready have some content formatted in a Google Doc? You can copy-paste it into the Visual Editor and most formatting will be retained.\nThe editing bar provides familiar point and click access to text formatting options like bulleted or numbered lists.\n\n\n\nRStudio IDE highlighting the point and click editing bar\n\n\n\nKeyboard shortcuts\nThe Visual Editor also lets you use many keyboard shortcuts that might be familiar for adding boldface (command-b), italics (command-i), or headers. On a Mac, option-command-2 will make a level 2 header. Try it with option-command-1, or option-command-0 for normal text!\n\n\nInsert an image or figure\nTo insert an image (called a figure in Quarto), click the image icon. This brings up a window in which we can select the image, set its alignment, give it a caption and alt text, hyperlink it, or edit other metadata.\n\n\n\nInsert image or figure using the Visual Editor\n\n\nOnce an image is added, clicking on that image gives us editing options. We can resize it dynamically by clicking in the image and dragging a corner or side to resize. When an image is selected, its dimensions are displayed for editing. Clicking on the gray ellipsis to the right of the dimensions opens the pop-up window to access more metadata edits.\n\n\nInsert a table\nSimilar to adding an image, to insert a table, we click the Table dropdown."
  },
  {
    "objectID": "UCL-Schoolwork/STAT0024.html#quarto-render",
    "href": "UCL-Schoolwork/STAT0024.html#quarto-render",
    "title": "From RStudio",
    "section": "Quarto render",
    "text": "Quarto render\nIn the Build tab in the top-right pane, click “Render Website”. This will build the .html files and preview your website. It’s equivalent to “knitting” in RMarkdown.\nNote that you can also click “Preview Website”. With “Render Website” in RStudio, Quarto is able to render and preview in one step.\nIf you’d ever like to stop the preview, in the bottom-left, click on the Jobs tab and then the red Stop button.\n\nMake a small change and render it\nClick on index.md. This will open this markdown file in a fourth pane; the editor pane. Make a small change, for example change to today’s date on Line 4. Then, save your file; there is a disc icon at the top of the file.\nThen, render this file: press “Render” which is to the right of the disc icon that saves the file. This will render only this single file, as opposed to rerendering the whole website like when we clicked “Render Website” in the top right pane. Checking Render on Save (between the disc icon and the Render button) is a great strategy for doing this in one step."
  },
  {
    "objectID": "UCL-Schoolwork/STAT0024.html#create-a-new-.rmd-page",
    "href": "UCL-Schoolwork/STAT0024.html#create-a-new-.rmd-page",
    "title": "From RStudio",
    "section": "Create a new .Rmd page",
    "text": "Create a new .Rmd page\nNew > RMarkdown document > OK\nThe starter RMarkdown document has some R code inside: it displays a summary of the cars dataset that is pre-loaded into R (summary(cars)) and plots the pressure data that is also pre-loaded (plot(pressure)).\nSave this document as r-example.rmd."
  },
  {
    "objectID": "UCL-Schoolwork/STAT0024.html#update-_quarto.yml",
    "href": "UCL-Schoolwork/STAT0024.html#update-_quarto.yml",
    "title": "From RStudio",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml\nNow we’ll add r-example.rmd to our _quarto.yml file; this is where we register all files to include in our site. Let’s add it after the section called “Quarto Workflows”.\nOpen _quarto.yml by clicking on it from the file directory.\nScroll down to review the current contents in the sidebar: section under contents:. It’s there we see all the file arrangement that we see in the previewed site.\nAdd - r-example.rmd in its own line, making sure that your indentation aligns with the other pages.\nFrom the Build tab, clicking Preview Website will recreate your website!"
  },
  {
    "objectID": "UCL-Schoolwork/STAT0024.html#authoring-tips",
    "href": "UCL-Schoolwork/STAT0024.html#authoring-tips",
    "title": "From RStudio",
    "section": "Authoring tips",
    "text": "Authoring tips\nChecking “Render on Save” is really helpful when iterating quickly on a document.\nIf the document is very code-heavy, consider using freeze that will not run the code each time.\nQuarto.org has details about authoring, including specific instructions about authoring in RStudio."
  },
  {
    "objectID": "UCL-Schoolwork/STAT0024.html#commit-and-push",
    "href": "UCL-Schoolwork/STAT0024.html#commit-and-push",
    "title": "From RStudio",
    "section": "Commit and push!",
    "text": "Commit and push!\nCommitting and pushing will make the changes you see locally live on your website (using the GitHub Action we set up earlier)."
  },
  {
    "objectID": "UCL-Schoolwork/STAT0024.html#troubleshooting",
    "href": "UCL-Schoolwork/STAT0024.html#troubleshooting",
    "title": "From RStudio",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nIf you have trouble rendering your website after for example changing the extenstion of a file from .md to .qmd, refreshing your RStudio often helps. Do this by clicking the project name at the upper right of the RStudio window (in this case, quarto-website-tutorial), and underneath the “close project” section, click the same name of your project: quarto-website-tutorial. This will relaunch your whole project afresh."
  },
  {
    "objectID": "UCL-Schoolwork/MATH0050.html",
    "href": "UCL-Schoolwork/MATH0050.html",
    "title": "MATH0050 Review Note",
    "section": "",
    "text": "The symbols which we will use to construct our language consist of:"
  },
  {
    "objectID": "Tools-and-Tips.html#mac",
    "href": "Tools-and-Tips.html#mac",
    "title": "Tools and Tips",
    "section": "Mac",
    "text": "Mac\n\niCloud\nIf iCloud gets stuck during the uploading process (never finish uploading), open the terminal and try the following:\n\n\nTerminal\n\nkillall bird\nkillall cloudd\n\nThe codes above will terminate the core process of file synchronization, and the process will start again automatically after a few seconds."
  },
  {
    "objectID": "Tools-and-Tips.html#apple-products",
    "href": "Tools-and-Tips.html#apple-products",
    "title": "Tools and Tips",
    "section": "Apple Products",
    "text": "Apple Products\n\nMac\n\niCloud\nIf iCloud gets stuck during the uploading process (never finish uploading), open the terminal and try the following:\n\n\nTerminal\n\nkillall bird\nkillall cloudd\n\nThe codes above will terminate the core process of file synchronization, and the process will start again automatically after a few seconds.\n\n\n\niPhone\n\n截屏选择”拷贝并删除”后，键盘卡死\n只需要再随意截屏一次即可，上一张拷贝了的截屏仍然会在剪贴板里，且可正常粘贴。"
  }
]